<?php
// auto-generated by sfPropelCrud
// date: 2008/07/24 15:35:45
?>
<?php

/**
 * user_admin actions.
 *
 * @package    fridge
 * @subpackage user_admin
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class user_adminActions extends myActions
{
	/**
	 * Only users are allowed to access pages in here.
	 * that have the appropriate permissions
	 */
	public function preExecute() {
		parent::preExecute();

		// get the user object
		$this->current_user = $this->getUserObject();
	}

  public function executeIndex()
  {
    return $this->forward('user_admin', 'list');
  }

  public function executeList()
  {
	// permission check
	if (!($this->current_user->canListUsers()))
		$this->insufficientRights();

	$c = new Criteria();
	$c->addDescendingOrderByColumn(UserPeer::LAST_LOGIN);
    $this->users = UserPeer::doSelect($c);
  }

  public function executePermissions()
  {
	// permission check
	if (!($this->current_user->canListUsers()))
		$this->insufficientRights();

	$c = new Criteria();
	$c->addAscendingOrderByColumn(UserPeer::EMAIL);
    $this->users = UserPeer::doSelect($c);
  }

  public function executeShow()
  {
    $this->user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->user);

	// permission check (users can see their own page)
	if (!($this->current_user->canListUsers() || ($this->user->getId() == $this->current_user->getId() && $this->user->canViewActivity())))
		$this->insufficientRights();

	$c = new Criteria();
	$c->add(PurchasePeer::USER_ID, $this->user->getId());
	$c->addDescendingOrderByColumn(PurchasePeer::CREATED_AT);
	$c->setLimit(20);
	$this->purchases = PurchasePeer::doSelect($c);

	// credit purchase?
	$this->credit = PurchasePeer::retrieveByPk($this->getRequestParameter("credit"));

	// debit purchase?
	$this->debit = PurchasePeer::retrieveByPk($this->getRequestParameter("debit"));

  }

  public function executeCreate()
  {
	// permission check
	if (!($this->current_user->canListUsers()))
		$this->insufficientRights();

    $this->user = new User();

    $this->setTemplate('edit');

	if (!($this->current_user->canEditUser($this->user)))
		$this->insufficientRights();

  }

  public function executeEdit()
  {
	// permission check
	if (!($this->current_user->canListUsers()))
		$this->insufficientRights();

    $this->user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->user);

	if (!($this->current_user->canEditUser($this->user)))
		$this->insufficientRights();

  }

	public function validateUpdate() {
		// check for existing email
		$c = new Criteria();
		$c->add(UserPeer::EMAIL, $this->getRequestParameter("email"));
		$user = UserPeer::doSelectOne($c);
		if ($user && $user->getId() != $this->getRequestParameter("id")) {
			$this->getRequest()->setError("email", "email address already exists in the system");
		}

		// check for existing nickname
		$c = new Criteria();
		$c->add(UserPeer::NICKNAME, $this->getRequestParameter("nickname"));
		$user = UserPeer::doSelectOne($c);
		if ($user && $user->getId() != $this->getRequestParameter("id")) {
			$this->getRequest()->setError("nickname", "nickname already exists in the system");
		}

		return !$this->getRequest()->hasErrors();
	}

	public function handleErrorUpdate() {
		// error in form => redirect to login page
		if ($this->getRequestParameter("id")) {
			return $this->forward("user_admin", "edit", array("id" => $this->getRequestParameter("id")));
		} else {
			return $this->forward("user_admin", "create");
		}
	}

  public function executeUpdate()
  {
	// permission check
	if (!($this->current_user->canListUsers()))
		$this->insufficientRights();

    if (!$this->getRequestParameter('id'))
    {
      $user = new User();
    }
    else
    {
      $user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($user);
    }

	if (!($this->current_user->canEditUser($this->user)))
		$this->insufficientRights();

    $user->setId($this->getRequestParameter('id'));
    $user->setEmail($this->getRequestParameter('email'));
    $user->setName($this->getRequestParameter('name'));
    $user->setNickname($this->getRequestParameter('nickname'));

	if ($this->current_user->canSetCredit($this->user))
    	$user->setAccountCredit($this->getRequestParameter('account_credit'));

    $user->save();

    // set permissions
    if ($this->current_user->canAssignPermissions()) {
		foreach (sfConfig::get("app_permission_list", array()) as $permission) {
			if ($this->getRequestParameter("permission_".$permission)) {
				if (!$user->hasPermission($permission) && $this->current_user->hasPermission($permission)) {
					// add it
					$p = new UserPermission($permission);
					$user->addPermission($p);
				}
			} elseif ($user->hasPermission($permission)) {
				// delete it
				$user->deletePermission($permission);
			}
		}
	}

	$user->save();

    // if adding a new user, send an email
    if (!$this->getRequestParameter('id')) {
		$password = sprintf("%04x%04x%04x", rand(0,0xffff), rand(0,0xffff), rand(0,0xffff));
		$user->setPasswordHash(md5($password));
		$user->save();

		$this->getRequest()->setParameter("password", $password);
		$this->getRequest()->setParameter("user", $user->getId());

		$raw_email = $this->sendEmail('mail', 'signup');
		$this->logMessage($raw_email, "debug");
	}

    return $this->redirect('user_admin/show?id='.$user->getId());
  }

  public function executeDelete()
  {
	// permission check
	if (!($this->current_user->canListUsers()))
		$this->insufficientRights();

    $user = UserPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($user);

	if (!($this->current_user->canDeleteUser($this->user)))
		$this->insufficientRights();

    $user->delete();

    return $this->redirect('user_admin/list');
  }

  public function executeCredit() {
	  try {
		// permission check
		if (!($this->current_user->canListUsers()))
			$this->insufficientRights();

		$this->user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
		$this->forward404Unless($this->user);

		$amount = (float) $this->getRequestParameter("amount");
		$this->forward404Unless($amount > 0, "cannot credit a negative or zero amount.");
		$this->forward404Unless($amount < sfConfig::get("app_credit_max", 50), "cannot credit more than " . sfConfig::get("app_credit_max", 50));

		if (!($this->current_user->canDirectCredit($this->user)))
			$this->insufficientRights();

		  // execute purchase
		  $purchase = new Purchase();
		  $purchase->setUser($this->user);
		  $purchase->setProduct(null);
		  $purchase->setQuantity(1);
		  $purchase->setPrice($amount);
		  $purchase->setSurcharge(0);
		  // special fields
		  $purchase->setIsDirectCredit(true);
		  $purchase->setCreditedByUser($this->current_user);
		  $purchase->save();

		  // add balance
		  $this->user->setAccountCredit($this->user->getAccountCredit() + $amount);
		  $this->user->save();

		  // redirect to ok page
		  return $this->redirect("user_admin/show?id=".$this->user->getId()."&credit=".$purchase->getId() );
	  } catch (sfError404Exception $e) {
		  $this->getRequest()->setError("exception", $e->getMessage());
		  return sfView::ERROR;
	  }
  }

  public function executeDebit() {
	  try {
		// permission check
		if (!($this->current_user->canListUsers()))
			$this->insufficientRights();

		$this->user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
		$this->forward404Unless($this->user);

		$amount = (float) $this->getRequestParameter("amount");
		$this->forward404Unless($amount > 0, "cannot debit a negative or zero amount.");
		$this->forward404Unless($amount < sfConfig::get("app_debit_max", 10), "cannot debit more than " . sfConfig::get("app_debit_max", 10));

		if (!($this->current_user->canDirectDebit($this->user)))
			$this->insufficientRights();

		  // execute purchase
		  $purchase = new Purchase();
		  $purchase->setUser($this->user);
		  $purchase->setProduct(null);
		  $purchase->setQuantity(1);
		  $purchase->setPrice(-$amount);
		  $purchase->setSurcharge(0);
		  // special fields
		  $purchase->setIsDirectCredit(true);
		  $purchase->setCreditedByUser($this->current_user);
		  $purchase->save();

		  // add balance
		  $this->user->setAccountCredit($this->user->getAccountCredit() - $amount);
		  $this->user->save();

		  // redirect to ok page
		  return $this->redirect("user_admin/show?id=".$this->user->getId()."&debit=".$purchase->getId() );
	  } catch (sfError404Exception $e) {
		  $this->getRequest()->setError("exception", $e->getMessage());
		  return sfView::ERROR;
	  }

  }

}
