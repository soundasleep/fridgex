<?php
// auto-generated by sfPropelCrud
// date: 2008/07/25 14:15:28
?>
<?php

/**
 * purchase actions.
 *
 * @package    fridge
 * @subpackage purchase
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class purchaseActions extends myActions
{
	/**
	 * Only users are allowed to access pages in here.
	 * that have the appropriate permissions
	 */
	public function preExecute() {
		parent::preExecute();

		// get the user object
		$this->user = $this->getUserObject();
	}

  public function executeIndex()
  {
    return $this->forward('purchase', 'list');
  }

  public function executeList()
  {
	// verify permissions
	if (!($this->user->canViewActivity()))
		$this->insufficientRights();

	$c = new Criteria();
	$c->addDescendingOrderByColumn(PurchasePeer::CREATED_AT);
	$c->setLimit(30);
    $this->purchases = PurchasePeer::doSelect($c);

    $this->cancelled = PurchasePeer::retrieveByPk($this->getRequestParameter("cancelled"));
  }

  public function executeCredit()
  {
	// verify permissions
	if (!($this->user->canVerifyCredit()))
		$this->insufficientRights();

    $this->purchases = $this->user->getPossibleCreditsToVerify();
  }

  public function executeUpdate()
  {
	// verify permissions
	if (!($this->user->canVerifyCredit()))
		$this->insufficientRights();

    $purchase = PurchasePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($purchase);

   	if (!($this->user->canVerifyActualCredit($purchase)))
   		$this->insufficientRights();

    if ($this->getRequestParameter("verify")) {
		$purchase->setVerifiedBy($this->user);
		$purchase->setVerifiedAt(time());
	}
    $purchase->setNotes($this->getRequestParameter('notes'));

    $purchase->save();

    return $this->redirect('purchase/credit');
  }

  public function executeCancel() {
	if (!($this->user->canCancelPurchases()))
		$this->insufficientRights();

	sfLoader::loadHelpers("My");

    $purchase = PurchasePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($purchase);
	$product = $purchase->getProduct();
	$this->forward404Unless($product || $purchase->getIsDirectCredit());
	$user = $purchase->getUser();
	$this->forward404Unless($user);

    $purchase->setCancelledAt(time());
    $purchase->setCancelledBy($this->user);

    // update product price logic
    // we undo the inventory change based on the purchase price

	if ($purchase->getIsDirectCredit()) {
		// update user credit
		$user->setAccountCredit($user->getAccountCredit() - $purchase->getPrice());

	} else {
		// (old quantity * old price) - (quantity* price taken away) / (new quantity)
		if ($purchase->getQuantity() == $product->getInventory()) {
			// this was all the quantity we had: set price to zero
			$product->setPrice(0);
		} else {
			$product->setPrice(
				( ($product->getPrice() * $product->getInventory()) - ($purchase->getQuantity() * $purchase->getPrice()) )
				/ ($product->getInventory() - $purchase->getQuantity()) );
		}

		// set new inventory
		$product->setInventory($product->getInventory() - $purchase->getQuantity());

		// update user credit
		if ($purchase->getQuantity() > 0) {
			$user->setAccountCredit($user->getAccountCredit() - ($purchase->getQuantity() * $purchase->getPrice()));
		} else {
			$user->setAccountCredit($user->getAccountCredit() - ($purchase->getQuantity() * ($purchase->getSurcharge() + $purchase->getPrice())));
		}

		$product->save();
	}

    $purchase->save();
    $user->save();

    return $this->redirect('purchase/list?cancelled='.$purchase->getId());
  }

}
